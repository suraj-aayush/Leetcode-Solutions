class Solution {
public:

bool canShip(vector<int>& weights, int days, int capacity) {
        int currLoad = 0, requiredDays = 1;

        for (int w : weights) {
            if (currLoad + w > capacity) {
                requiredDays++;
                currLoad = 0;
            }
            currLoad += w;
        }

        return requiredDays <= days;
    }

    int shipWithinDays(vector<int>& weights, int days) {
        int n=weights.size();

        int low = *max_element(weights.begin(), weights.end());
        int high = accumulate(weights.begin(), weights.end(), 0);

        while(low <= high)
        {
            int mid = low + (high-low)/2;

            if(canShip(weights, days, mid))
            {
                high = mid-1;
            }
            else
            {
                low = mid+1;
            }
        }

        return low;

    }
};
