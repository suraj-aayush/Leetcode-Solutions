/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

void markParent(TreeNode* root, unordered_map<TreeNode*,TreeNode*>&parentMap)
{
    queue<TreeNode*>q;
    q.push(root);
    while(!q.empty())
    {
        TreeNode* node = q.front();
        q.pop();

        if(node->left)
        {
            q.push(node->left);
            parentMap[node->left] = node;  
        }
        if(node->right)
        {
            q.push(node->right);
            parentMap[node->right] = node;
        }
    }
}

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parentMap;
        markParent(root, parentMap);

        unordered_map<TreeNode*, bool> visited;

        queue<TreeNode*>q;
        vector<int>ans;

        q.push(target);
        visited[target] = true;
        int curLevel=0;
        while(!q.empty())
        {
            int size = q.size();
            if(curLevel == k) break;
            curLevel++;

            for(int i=0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop();

                if(node->left && !visited[node->left])
                {
                    visited[node->left] = true;
                    q.push(node->left);
                }
                if(node->right && !visited[node->right])
                {
                    visited[node->right] = true;
                    q.push(node->right);
                }
                TreeNode* curNodeParent = parentMap[node];
                if(parentMap[node] && !visited[curNodeParent])
                {
                    q.push(curNodeParent);
                    visited[curNodeParent] = true;
                }

            }

        }
        while(!q.empty())
        {
            TreeNode * cur = q.front();
            q.pop();
            ans.push_back(cur->val);
        }


        return ans;
    }
};
