class Solution {
public:

bool isValidIndex(vector<vector<int>>& grid, int i, int j, int n, int m )
{
    if(i>=0 && i<n && j>=0 && j<m &&grid[i][j] ==1)
    return true;


    return false;
}

void recursion(vector<vector<int>>& grid, int i, int j, int n, int m, int &area)
{
    area++; 
    grid[i][j] = 0;

    if( isValidIndex(grid, i, j+1, n, m) )
    recursion(grid, i, j+1, n,m, area);

    if( isValidIndex(grid, i, j-1, n, m) )
    recursion(grid, i, j-1, n,m, area);

    if( isValidIndex(grid, i+1, j, n, m) )
    recursion(grid, i+1, j, n,m, area);

    if( isValidIndex(grid, i-1, j, n, m) )
    recursion(grid, i-1, j, n,m, area);

}

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    int area=0;
                    recursion(grid, i, j, n, m, area);
                    ans = max(ans, area);
                }
            }
        }
        return ans;
    }
};
