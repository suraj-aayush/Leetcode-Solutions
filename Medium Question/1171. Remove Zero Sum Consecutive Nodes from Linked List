/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        int prefixSum=0;

        unordered_map<int, ListNode*>mp;
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        mp[0]=dummy;
        ListNode*p=head, *q=head;
        while(p)
        {
            prefixSum += p->val;
            if(mp.find(prefixSum) != mp.end())
            {
                ListNode *start = mp[prefixSum];
                ListNode *temp = start;
                int pSum = prefixSum;
                while(temp != p)
                {
                    temp = temp->next;
                    pSum += temp->val;

                    if(temp != p)
                    mp.erase(pSum);
                }
                start->next = p->next;
            }
            else
            {
                mp[prefixSum] = p;
            }

            p=p->next;
        }



        return dummy->next;
    }
};
