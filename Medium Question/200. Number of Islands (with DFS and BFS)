class Solution {
public:

// TC -> N^2
// SC -> N^2
void bfs(int i, int j, vector<vector<int>>&vis, vector<vector<char>>& grid)
{
    int n=grid.size();
    int m=grid[0].size();
    vis[i][j] = 1;
    queue<pair<int,int>>q;
    q.push({i, j});
int dr[] = {-1, 0, 1, 0}; // Row movement: up, no change, down, no change
int dc[] = {0, 1, 0, -1}; // Column movement: no change, right, no change, left

    while(!q.empty())
    {
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        // check all the 4 boundaries?

        for(int d=0;d<4;d++)
        {
            int nrow = a + dr[d];
            int ncol = b + dc[d];

            if ( nrow>=0 && nrow<n && ncol>=0 &&
                ncol<m && grid[nrow][ncol] == '1' && 
                !vis[nrow][ncol] )
                {
                    vis[nrow][ncol] = 1;
                    q.push({nrow, ncol}); 
                }  
        }
    }
}

void dfs(int i, int j, vector<vector<int>>&vis, vector<vector<char>>& grid)
{
    int n=grid.size();
    int m=grid[0].size();
    if(i<0 || j<0 || i>=n || j>=m || grid[i][j] == '0' || vis[i][j] == 1) return;

    vis[i][j] = 1;

        // Recursively visit all 4 directions
        dfs(i - 1, j, vis, grid); // Up
        dfs(i + 1, j, vis, grid); // Down
        dfs(i, j - 1, vis, grid); // Left
        dfs(i, j + 1, vis, grid); // Right
}

    int numIslands(vector<vector<char>>& grid) {
        // n x m matrix
        int n=grid.size();
        int m=grid[0].size();
        int count = 0;
        vector<vector<int>>vis(n, vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == '1' && !vis[i][j])
                {
                    count++;
                    // bfs(i, j, vis, grid);
                    dfs(i, j, vis, grid);
                }
            }
        }
        return count;
    }
};
