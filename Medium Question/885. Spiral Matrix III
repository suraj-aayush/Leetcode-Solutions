class Solution {
public:
    vector<vector<int>> spiralMatrixIII(int rows, int cols, int rStart, int cStart) {
        /*

    start (r,c) -> 1 right -> 1 down -> 2 left -> 2 up 
                -> 2 right -> 3 down -> 3 left -> 3 up


*/
        
        vector<vector<int>> directions = {
            {0,1},  // EAST 
            {1,0},  // SOUTH
            {0,-1}, // WEST
            {-1,0}  // NORTH
        };

        vector<vector<int>> result;
        int steps = 0 ; // HOW MUCH STEPS TO TAKE
        int dir = 0; // in "dir" direction

        result.push_back({rStart, cStart});

        while(result.size() < rows * cols)
        {
            if(dir == 0 || dir == 2)
            {
                steps++;
            }
            for(int count=0; count<steps; count++)
            {
                rStart += directions[dir][0];
                cStart += directions[dir][1];

                if(rStart >=0 && rStart<rows && cStart>=0 && cStart<cols)
                {
                    result.push_back({rStart, cStart});
                }
            }

            dir = (dir+1)%4;
        }
        return result;
    }
};

