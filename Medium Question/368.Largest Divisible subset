class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        int dp[]=new int[n];
        Arrays.fill(dp,1);
        int hash[]=new int[n];
        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int pre=0;pre<i;pre++){
                if(nums[i]%nums[pre]==0 && 1+dp[pre]>dp[i]){
                    dp[i]=1+dp[pre];
                    hash[i]=pre;
                }
            }
        }

        int ans=-1;
        int lastindex=-1;
        for(int i=0;i<n;i++){
            if(dp[i]>ans){
                ans=dp[i];
                lastindex=i;
            }
        }

        List<Integer> temp=new ArrayList<>();
        temp.add(nums[lastindex]);

        while(hash[lastindex]!=lastindex){
            lastindex=hash[lastindex];
            temp.add(nums[lastindex]);
        }
        return temp;
        
    }
}
