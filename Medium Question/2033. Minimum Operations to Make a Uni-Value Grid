class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        vector<int> arr;

        // Flatten the 2D grid into a 1D array
        for (auto &row : grid) {
            for (auto &val : row) {
                arr.push_back(val);
            }
        }

        int n = arr.size();
        sort(arr.begin(), arr.end());

        // Choose the median(s)
        int median1 = arr[n / 2];
        int median2 = (n % 2 == 0) ? arr[n / 2 - 1] : arr[n / 2];

        int cost1 = 0, cost2 = 0;

        for (int i = 0; i < n; i++) {
            if (abs(arr[i] - median1) % x != 0) return -1;
            cost1 += abs(arr[i] - median1) / x;
            cost2 += abs(arr[i] - median2) / x;
        }

        return min(cost1, cost2);
    }
};
