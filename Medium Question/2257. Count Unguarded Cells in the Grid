class Solution {
public:
    void markCellOne(int r, int c, vector<vector<int>>& grid) {
        // Up
        for (int i = r - 1; i >= 0; i--) {
            if (grid[i][c] == 2 || grid[i][c] == 3) break;
            grid[i][c] = 1;
        }
        // Down
        for (int i = r + 1; i < grid.size(); i++) {
            if (grid[i][c] == 2 || grid[i][c] == 3) break;
            grid[i][c] = 1;
        }
        // Left
        for (int i = c - 1; i >= 0; i--) {
            if (grid[r][i] == 2 || grid[r][i] == 3) break;
            grid[r][i] = 1;
        }
        // Right
        for (int i = c + 1; i < grid[0].size(); i++) {
            if (grid[r][i] == 2 || grid[r][i] == 3) break;
            grid[r][i] = 1;
        }
    }

    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        int ans = 0;
        vector<vector<int>> grid(m, vector<int>(n, 0));
        
        // Set guards (2) and walls (3)
        for (auto x : guards) {
            grid[x[0]][x[1]] = 2;
        }
        for (auto x : walls) {
            grid[x[0]][x[1]] = 3;
        }

        // Mark cells guarded (1)
        for (auto x : guards) {
            int i = x[0];
            int j = x[1];
            markCellOne(i, j, grid);
        }

        // Count unguarded cells (0)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) ans++;
            }
        }

        return ans;
    }
};
