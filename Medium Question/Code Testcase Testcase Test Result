// class Solution {
// public:
//     vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
//         vector<vector<int>>ans;
//         for(auto x:intervals)
//         {
//             int st = x[0];
//             int end = x[1];
//             if(end < newInterval[0])
//             ans.push_back(x);
//             else
//             {
//                 vector<int>temp;
//                 temp.push_back(x[0]);
//                 temp.push_back(newInterval[1]);

//                 ans.push_back(temp);
//             }
//         }

//         return ans;
//     }
// };

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        const int n = intervals.size();
        vector<vector<int>> ans;
        int i = 0;

        // Add intervals before newInterval
        while (i < n && intervals[i][1] < newInterval[0])
            ans.push_back(intervals[i++]);

        // Merge overlapping intervals
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            ++i;
        }
        ans.push_back(newInterval);

        // Add remaining intervals
        while (i < n)
            ans.push_back(intervals[i++]);

        return ans;
    }
};
