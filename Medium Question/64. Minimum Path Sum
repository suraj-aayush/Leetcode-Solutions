class Solution {
public:
int solve(int i, int j, vector<vector<int>>&dp, vector<vector<int>>&grid)
{
    if(i==0&& j==0)
    return grid[i][j];

    if(i<0||j<0)
    return 1e9;

    if(dp[i][j] != -1)
    return dp[i][j];

    int up = grid[i][j] + solve(i-1, j, dp, grid);
    int upLeft = grid[i][j] + solve(i, j-1, dp, grid);


    return dp[i][j] = min(up, upLeft);

}

    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
// Tabulation

vector<vector<int>>dp(n, vector<int>(m,0));
for(int i=0;i<n;i++)
{
    for(int j=0;j<m;j++)
    {
        if(i==0 && j==0)
        dp[i][j] = grid[0][0];
        else
        {
            int up = grid[i][j];
            if(i>0) up += dp[i-1][j];
            else up=1e9;

            int Left = grid[i][j];
            if(j>0) Left += dp[i][j-1];
            else Left = 1e9;

            dp[i][j] = min(up,Left);
        }
    }
}

return dp[n-1][m-1];

//  MEMOIZATION
// vector<vector<int>>dp(n, vector<int>(m, -1));
// return solve(n-1, m-1, dp, grid);


    }
};
