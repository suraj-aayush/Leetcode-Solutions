class Solution {
public:

// void dfs(int i, int j, int m, int n, vector<vector<int>>& grid, 
// vector<vector<int>>&vis)
// {
//     if(i<0||j<0||i>=m||j>=n||vis[i][j] == 1 || grid[i][j] != 1) return;

//     if(grid[i][j]==1 && !vis[i][j])
//     vis[i][j] = 1;

//     dfs(i, j+1,m,n,grid,vis);
//     dfs(i+1, j,m,n,grid,vis);
//     dfs(i, j-1,m,n,grid,vis);
//     dfs(i-1, j,m,n,grid,vis);
// }

    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<int>rowCount(m,0);
        vector<int>colCount(n,0);
        int total = 0;

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    rowCount[i]++;
                    colCount[j]++;

                    total++;
                }
            }
        }

for(int i=0;i<m;i++)
{
    for(int j=0;j<n;j++)
    {
        if(grid[i][j]==1)
        {
            if(rowCount[i] <= 1 && colCount[j] <= 1)
            total--;
            
        }
    }
}


return total;

//         vector<vector<int>>vis(m, vector<int>(n,0));

//         for(int i=0;i<m;i++)
//         {
//             for(int j=0;j<n;j++)
//             {
//                 if(grid[i][j] == 1 && !vis[i][j])
//                 dfs(i,j,m,n,grid,vis);
//             }
//         }
// int c=0;
//         for(int i=0;i<m;i++)
//         {
//             for(int j=0;j<n;j++)
//             {
//                 if(grid[i][j] == 1 && !vis[i][j])
//                 c++;
//             }
//         }
//         return c;
    }
};
