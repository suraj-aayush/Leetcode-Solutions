class Solution {
public:

bool check(int start, vector<vector<int>>& graph, vector<int>&colors)
{
    queue<int>q;
        q.push(start);
        colors[start] = 0;
         
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            for(auto it: graph[node])
            {
                if(colors[it] == -1)
                {
                    colors[it] = !colors[node];
                    q.push(it);
                }
                else if(colors[it] == colors[node])
                return false;
            }
        }

        return true;
}

    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        // 0 -> color1 , 1-> color2
        vector<int>colors(n, -1);

        for(int i=0;i<n;i++)
        {
            if(colors[i] == -1)
            {
                if( !check(i, graph, colors) )
                return false;
            }
        }

        return true;
    }
};
