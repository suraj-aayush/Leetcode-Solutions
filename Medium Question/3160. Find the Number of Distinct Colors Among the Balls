class Solution {
public:
    vector<int> queryResults(int limit, vector<vector<int>>& queries) {
        vector<int> ans;
        unordered_map<int, int> m;  
        unordered_map<int, int> colorCount;  // Tracks occurrences of each color

        for (auto &q : queries) 
        {
            int x = q[0], y = q[1];
            // If `x` already has a color, update colorCount properly
            if (m.find(x) != m.end()) 
            {
                int old_y = m[x];
                colorCount[old_y]--;

                // If the old color is no longer used, remove it
                if (colorCount[old_y] == 0) 
                {
                    colorCount.erase(old_y);
                }
            }
            m[x] = y;
            colorCount[y]++;

            // Store number of unique colors
            ans.push_back(colorCount.size());
        }

        return ans;
    }
};
