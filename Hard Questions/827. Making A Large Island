class Solution {
public:

vector<vector<int>>directions = {{-1,0}, {1,0}, {0,1}, {0,-1}};

int dfs(vector<vector<int>>& grid, int i, int j, int islandID, vector<vector<int>>&vis) {
    int n = grid.size();
        if (i < 0 || j < 0 || i >= n || j >= n || grid[i][j] ==0 || vis[i][j]) return 0;

        grid[i][j] = islandID; // Mark as visited with unique ID
        vis[i][j] = 1;
        int area = 1;
        
        for (auto& dir : directions) {
            int nx = i + dir[0];
            int ny = j + dir[1];
            area += dfs(grid, nx, ny, islandID, vis);
        }

        return area;
    }

    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size();
int id=2;
unordered_map<int,int>m;
vector<vector<int>>vis(n, vector<int>(n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                // grid[i][j] = 1;
                if(grid[i][j]==1 && !vis[i][j])
                {
                    int value = dfs(grid, i, j, id, vis);
                    m[id] = value;
                    id++;
                }
            }
        }

int maxArea = 0;
   for (int i = 0; i < n; i++) 
   {
        for (int j = 0; j < n; j++) 
        {
            if (grid[i][j] == 0) 
            {
                set<int>st;
                for(auto &v:directions)
                {
                    int nx = i + v[0];
                    int ny = j + v[1];

                    if(nx>=0 && nx<n && ny>=0 && ny<n && grid[nx][ny] != 0)
                    {
                        st.insert(grid[nx][ny]);
                    }
                }
                int size = 1;
                for(auto &it: st)
                {
                    size += m[it];
                }

                maxArea = max(maxArea, size);
            }
        }
    }

    return maxArea > 0 ? (maxArea) : (n*n);

    }
};
